diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..67255cb
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,20 @@
+project(libcec-daemon)
+cmake_minimum_required(VERSION 2.8)
+
+set(CPACK_PACKAGE_NAME ${PROJECT_NAME})
+set(CPACK_PACKAGE_VERSION "0.9")
+
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
+
+configure_file(${PROJECT_SOURCE_DIR}/cmake/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)
+include_directories(${CMAKE_CURRENT_BINARY_DIR})
+
+find_package(Boost COMPONENTS thread system program_options)
+find_package(Log4cplus)
+find_package(Cec)
+
+file(GLOB libcec-daemon_SOURCES ${PROJECT_SOURCE_DIR}/src/*cpp)
+add_executable(libcec-daemon ${libcec-daemon_SOURCES})
+target_link_libraries(libcec-daemon ${Boost_LIBRARIES} ${LOG4CPLUS_LIBRARIES} ${Cec_LIBRARIES} ${CMAKE_DL_LIBS})
+
diff --git a/Makefile.am b/Makefile.am
deleted file mode 100644
index b62cccd..0000000
--- a/Makefile.am
+++ /dev/null
@@ -1,13 +0,0 @@
-AUTOMAKE_OPTIONS = subdir-objects
-ACLOCAL_AMFLAGS = -I m4
-
-bin_PROGRAMS = libcec-daemon
-libcec_daemon_SOURCES = src/accumulator.hpp \
-                        src/hdmi.cpp \
-                        src/hdmi.h \
-                        src/libcec.cpp \
-                        src/libcec.h \
-                        src/main.cpp \
-                        src/main.h \
-                        src/uinput.cpp \
-                        src/uinput.h
diff --git a/bootstrap b/bootstrap
deleted file mode 100755
index b0a16f4..0000000
--- a/bootstrap
+++ /dev/null
@@ -1,19 +0,0 @@
-#!/bin/sh
-
-if which dpkg >/dev/null 2>&1; then
-   check_pkg()
-   {
-       dpkg --compare-versions "`dpkg-query --show --showformat '${Version}' "$1" 2>/dev/null`" ge "$2" || echo "WARNING: $1 is not installed or is not at least version $2"
-   }
-   check_pkg g++ 4
-   check_pkg autoconf 2.69
-   check_pkg automake 1:1.11
-   check_pkg libcec-dev 2.1
-   check_pkg libboost-thread-dev 1.49
-   check_pkg libboost-program-options-dev 1.49
-   check_pkg liblog4cplus-dev 1
-fi
-
-aclocal -I m4
-#libtoolize
-autoreconf -ivf
diff --git a/cmake/FindCec.cmake b/cmake/FindCec.cmake
new file mode 100644
index 0000000..79106c5
--- /dev/null
+++ b/cmake/FindCec.cmake
@@ -0,0 +1,13 @@
+
+find_path(Cec_INCLUDE_DIR libcec/cec.h)
+
+find_library(Cec_LIBRARY NAMES cec)
+
+set(Cec_LIBRARIES ${Cec_LIBRARY})
+set(Cec_INCLUDE_DIRS ${Cec_INCLUDE_DIR})
+
+include(FindPackageHandleStandardArgs)
+
+find_package_handle_standard_args(Cec DEFAULT_MSG Cec_LIBRARY Cec_INCLUDE_DIR)
+mark_as_advanced(Cec Cec_INCLUDE_DIR Cec_LIBRARY)
+
diff --git a/cmake/FindLog4cplus.cmake b/cmake/FindLog4cplus.cmake
new file mode 100644
index 0000000..e2f0f4f
--- /dev/null
+++ b/cmake/FindLog4cplus.cmake
@@ -0,0 +1,24 @@
+# - Try to find Log4cplus
+# Once done this will define
+#  LOG4CPLUS_FOUND - System has Log4cplus
+#  LOG4CPLUS_INCLUDE_DIRS - The Log4cplus include directories
+#  LOG4CPLUS_LIBRARIES - The libraries needed to use Log4cplus
+
+
+find_path(LOG4CPLUS_INCLUDE_DIR log4cplus/config.hxx
+          PATH_SUFFIXES log4cplus )
+
+find_library(LOG4CPLUS_LIBRARY NAMES log4cplus
+             PATHS /usr)
+
+set(LOG4CPLUS_LIBRARIES ${LOG4CPLUS_LIBRARY} )
+set(LOG4CPLUS_INCLUDE_DIRS ${LOG4CPLUS_INCLUDE_DIR} )
+
+include(FindPackageHandleStandardArgs)
+# handle the QUIETLY and REQUIRED arguments and set LIBXML2_FOUND to TRUE
+# if all listed variables are TRUE
+find_package_handle_standard_args(Log4cplus  DEFAULT_MSG
+                                  LOG4CPLUS_LIBRARY LOG4CPLUS_INCLUDE_DIR)
+
+mark_as_advanced(LOG4CPLUS_INCLUDE_DIR LOG4CPLUS_LIBRARY )
+
diff --git a/cmake/config.h.in b/cmake/config.h.in
new file mode 100644
index 0000000..43be4fa
--- /dev/null
+++ b/cmake/config.h.in
@@ -0,0 +1,22 @@
+
+/* Name of package */
+#define PACKAGE "${CPACK_PACKAGE_NAME}"
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT ""
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "${CPACK_PACKAGE_NAME}"
+
+/* Define to the full name and version of this package. */
+#define PACKAGE_STRING "${CPACK_PACKAGE_NAME} ${CPACK_PACKAGE_VERSION}"
+
+/* Define to the one symbol short name of this package. */
+#define PACKAGE_TARNAME "${CPACK_PACKAGE_NAME}"
+
+/* Define to the home page for this package. */
+#define PACKAGE_URL ""
+
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "${CPACK_PACKAGE_VERSION}"
+
diff --git a/configure.ac b/configure.ac
deleted file mode 100644
index 482e63e..0000000
--- a/configure.ac
+++ /dev/null
@@ -1,40 +0,0 @@
-AC_PREREQ([2.59])
-AC_INIT([libcec-daemon], [0.9])
-AC_CONFIG_MACRO_DIR(m4)
-AC_CONFIG_HEADERS([config.h])
-#
-AC_CANONICAL_HOST
-#
-AM_INIT_AUTOMAKE([1.11 foreign])
-AM_SILENT_RULES([yes])
-AM_MAINTAINER_MODE
-#
-AC_PROG_CXX
-#
-AX_CXX_COMPILE_STDCXX_11(,[mandatory])
-#
-AC_CHECK_LIB([dl], [dlopen])
-#
-#AC_CHECK_LIB(cec, cec_initialize)
-PKG_CHECK_MODULES([LIBCEC], [libcec >= 2.1], [LIBS="${LIBCEC_LIBS} ${LIBS}"], AC_MSG_ERROR("required package libcec is missing"))
-#
-AC_LANG_PUSH([C++])
-#
-AC_CHECK_HEADERS([log4cplus/logger.h],, AC_MSG_ERROR("required log4cplus headers are either missing or incomplete"))
-AX_CXX_CHECK_LIB([log4cplus], [log4cplus::Logger::getRoot()],, AC_MSG_ERROR("required library log4cplus is missing"))
-#
-AC_CHECK_HEADERS([boost/program_options.hpp boost/thread/thread.hpp],, AC_MSG_ERROR("required boost headers are either missing or incomplete"))
-AX_CXX_CHECK_LIB([boost_program_options], [boost::program_options::positional_options_description],, AC_MSG_ERROR("required library boost is either missing or incomplete"))
-AX_CXX_CHECK_LIB([boost_thread], [boost::thread],, AC_MSG_ERROR("required library boost is either missing or incomplete"))
-AC_CACHE_CHECK([whether boost::program_options::typed_value<> supports value_name() member.],
-    [my_cv_boost_po_typed_value_name],
-    AC_TRY_COMPILE(["#include <boost/program_options.hpp>"],
-        [auto a = boost::program_options::value<int>()->value_name("test")], [my_cv_boost_po_typed_value_name=yes], [my_cv_boost_po_typed_value_name=no]))
-if test "$xmy_cv_boost_po_typed_value_name" = xyes; then
-    AC_DEFINE([HAVE_BOOST_PO_TYPED_VALUE_NAME], [1], [Define if boost::program_options::typed_value<> supports value_name])
-fi
-#
-AC_LANG_POP
-#
-AC_CONFIG_FILES([Makefile])
-AC_OUTPUT
diff --git a/src/hdmi.cpp b/src/hdmi.cpp
index 7bf9054..339ce1e 100644
--- a/src/hdmi.cpp
+++ b/src/hdmi.cpp
@@ -6,13 +6,13 @@
 
 #include <cstdio>
 
-std::ostream& operator<<(std::ostream &out, const HDMI::physical_address & address)
+std::ostream& HDMI::operator<<(std::ostream &out, const HDMI::physical_address & address)
 {
     return out << address[0] << '.' << address[1] << '.'
                << address[2] << '.' << address[3];
 }
 
-std::istream& operator>>(std::istream &in, HDMI::physical_address & address)
+std::istream& HDMI::operator>>(std::istream &in, HDMI::physical_address & address)
 {
     std::string s;
 
@@ -56,7 +56,7 @@ std::istream& operator>>(std::istream &in, HDMI::physical_address & address)
     return in;
 }
 
-std::istream& operator>>(std::istream &in, HDMI::address & address)
+std::istream& HDMI::operator>>(std::istream &in, HDMI::address & address)
 {
     char c = in.peek();
     if( c >= '0' && c <= '9' )
@@ -116,7 +116,7 @@ std::istream& operator>>(std::istream &in, HDMI::address & address)
     return in; 
 }
 
-std::ostream& operator<<(std::ostream &out, const HDMI::address & address)
+std::ostream& HDMI::operator<<(std::ostream &out, const HDMI::address & address)
 {
     switch( address.logical )
     {
diff --git a/src/hdmi.h b/src/hdmi.h
index bfd5c34..58ec43d 100644
--- a/src/hdmi.h
+++ b/src/hdmi.h
@@ -35,10 +35,11 @@ namespace HDMI
         CEC::cec_logical_address logical;
         uint8_t port;
     };
-};
+    
+    std::ostream& operator<<(std::ostream &out, const HDMI::physical_address & address);
+    std::istream& operator>>(std::istream &in, HDMI::physical_address & address);
 
-std::ostream& operator<<(std::ostream &out, const HDMI::physical_address & address);
-std::istream& operator>>(std::istream &in, HDMI::physical_address & address);
+    std::istream& operator>>(std::istream &in, HDMI::address & address);
+    std::ostream& operator<<(std::ostream &out, const HDMI::address & address);
+};
 
-std::ostream& operator<<(std::ostream &out, const HDMI::address & address);
-std::istream& operator>>(std::istream &in, HDMI::address & address);
diff --git a/src/libcec.cpp b/src/libcec.cpp
index 28b3763..abaac20 100644
--- a/src/libcec.cpp
+++ b/src/libcec.cpp
@@ -142,17 +142,17 @@ Cec::Cec(const char * name, CecCallback * callback)
 	strncpy(config.strDeviceName, name, sizeof(config.strDeviceName));
 	config.deviceTypes.Add(CEC_DEVICE_TYPE_RECORDING_DEVICE);
 	config.bAutodetectAddress = CEC_DEFAULT_SETTING_AUTODETECT_ADDRESS;
-	config.iPhysicalAddress = CEC_INVALID_PHYSICAL_ADDRESS;
-	config.baseDevice = CECDEVICE_UNKNOWN;
-	config.iHDMIPort = CEC_HDMI_PORTNUMBER_NONE;
-	config.bUseTVMenuLanguage = 0;
+	//config.iPhysicalAddress = CEC_INVALID_PHYSICAL_ADDRESS;
+	//config.baseDevice = CECDEVICE_UNKNOWN;
+	//config.iHDMIPort = CEC_HDMI_PORTNUMBER_NONE;
+	//config.bUseTVMenuLanguage = 0;
 	config.bActivateSource = 0;
-	config.bPowerOffScreensaver = 0;
-	config.bPowerOnScreensaver = 0;
-	config.bSendInactiveSource = 0;
-	config.bPowerOffOnStandby = 0;
-	config.bShutdownOnStandby = 0;
-	config.iDoubleTapTimeoutMs = 0;
+	//config.bPowerOffScreensaver = 0;
+	//config.bPowerOnScreensaver = 0;
+	//config.bSendInactiveSource = 0;
+	//config.bPowerOffOnStandby = 0;
+	//config.bShutdownOnStandby = 0;
+	//config.iDoubleTapTimeoutMs = 0;
 
 	callbacks.CBCecLogMessage           = &::cecLogMessage;
 	callbacks.CBCecKeyPress             = &::cecKeyPress;
